{"version":3,"sources":["views/AppLayoutView/AppLayoutView.tsx","models/CommunicationFeed.ts","models/CommunicationFeedProviderService.ts","components/MessageComponent/MessageComponent.tsx","views/MessagingView/MessagingView.tsx","components/EmojiSelection/EmojiSelection.tsx","components/MessageEditor/MessageEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["observer","props","theme","createMuiTheme","palette","primary","main","secondary","id","ThemeProvider","AppBar","position","Toolbar","Typography","variant","style","flex","textAlign","children","CommunicationFeed","dialogueProgress","step","running","messages","timeout","length","this","setTimeout","localBotMessage","printDialogue","content","receiveMessage","message","data","push","metadata","timestamp","Date","channelIndex","switchChannel","activeChannel","channels","msg","sender","user","trigger","console","exception","observable","CommunicationFeedProviderService","model","className","emoji","Intl","DateTimeFormat","hour","minute","format","feed","getCommunicationFeed","messagesEndRef","React","createRef","useEffect","current","scrollIntoView","behavior","map","item","ref","emojiCollection","split","onClick","sendMessage","selection","useState","message_value","setMessage_value","TextField","label","multiline","rows","value","placeholder","fullWidth","onChange","event","target","Button","color","trim","App","Boolean","window","location","hostname","match","a","Pusher","logToConsole","cluster","authEndpoint","pusher","subscribe","channel","bind","join","subscribeToPusher","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9e3c615a.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography, Button } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport {observer} from \"mobx-react\";\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport './AppLayoutView.css';\r\n\r\nconst AppLayoutView: FunctionComponent<{}> = props => {\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#ff0066',\r\n    },\r\n    secondary: {\r\n      main: '#f44336',\r\n    },\r\n  },\r\n});\r\n\r\n    return <div id =\"App\">\r\n      <ThemeProvider theme={theme}>\r\n      <AppBar position =\"static\"> \r\n    <Toolbar>\r\n      <Typography variant=\"h6\" style={{ flex: 1,textAlign : 'center' }}>\r\n        Awesome Cyber Laser Mega Chat\r\n      </Typography>\r\n    </Toolbar>\r\n  </AppBar>\r\n      {props.children}\r\n  </ThemeProvider>\r\n  </div>\r\n};\r\n\r\nexport default observer(AppLayoutView);","import { getAllByPlaceholderText } from \"@testing-library/react\";\r\nimport {observable} from \"mobx\";\r\n\r\nexport default class CommunicationFeed {\r\n\r\n  @observable\r\n  messages: any[] = [];\r\n\r\n  @observable\r\n  channels: any[] = [];\r\n\r\n  @observable\r\n  activeChannel: any = null;\r\n\r\n  @observable\r\n  user: any=null;\r\n\r\n  private dialogueProgress = {step: 0, running : false};\r\n\r\n  printDialogue(messages:string[],timeout:number)\r\n  {\r\n\r\n    if(messages.length-1 >= this.dialogueProgress.step)\r\n    {\r\n      setTimeout(\r\n        ()=>{\r\n\r\n            this.localBotMessage(messages[this.dialogueProgress.step]);\r\n\r\n            this.dialogueProgress.step++;\r\n        },timeout*messages[this.dialogueProgress.step].length\r\n      );\r\n     \r\n      setTimeout(()=>{this.printDialogue(messages,timeout)},\r\n      timeout*messages[this.dialogueProgress.step].length);\r\n    }\r\n    else\r\n    {\r\n      this.dialogueProgress.step = 0;\r\n      this.dialogueProgress.running = false;\r\n    }\r\n  }\r\n\r\n  localBotMessage(content:string)\r\n  {\r\n    this.receiveMessage({'sender': {'emoji': 'üêå'}, \r\n            message : content})\r\n  }\r\n\r\n  receiveMessage(data:any)\r\n  {\r\n    this.messages.push({\r\n      metadata: {timestamp: new Date()},\r\n      content: data\r\n    });\r\n  }\r\n\r\n  join(channelIndex:number)\r\n  {\r\n    this.switchChannel(channelIndex);\r\n    //this.sendMessage(\"joined the chat!\");\r\n  }\r\n\r\n  switchChannel(channelIndex:number)\r\n  {\r\n      this.activeChannel = this.channels[channelIndex];\r\n  }\r\n\r\n  sendMessage(content:string)\r\n  {\r\n    if(this.activeChannel != null)\r\n    {\r\n\r\n      const msg = {sender: this.user, message:content};\r\n\r\n      this.activeChannel.trigger(\"client-message\",msg);\r\n\r\n      //receive the same message we've just sent\r\n      //just to show it in our feed\r\n      this.receiveMessage(msg);\r\n\r\n    }\r\n    else\r\n    {\r\n      console.exception(\"please select a channel\");\r\n    }\r\n  }\r\n\r\n\r\n}","import CommunicationFeed from \"./CommunicationFeed\";\r\n\r\nexport default class CommunicationFeedProviderService {\r\n\r\n  private static model = new CommunicationFeed();\r\n\r\n  public static getCommunicationFeed(): CommunicationFeed {\r\n    return CommunicationFeedProviderService.model;\r\n  }\r\n\r\n}","import React, { FunctionComponent } from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport './MessageComponents.css';\r\n\r\nconst MessageComponent : FunctionComponent<{message:any}> = props => {\r\n\r\nreturn <div className='MessageBubble'>\r\n    <div className='MessageBubble__profilePicture'>\r\n        {props.message.content.sender.emoji}</div>\r\n    {props.message.content.message}\r\n    <label className =\"MessageBubble__timestamp\"> \r\n    {new Intl.DateTimeFormat(\"de-DE\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n  }).format(props.message.metadata.timestamp)}\r\n    </label>\r\n</div>;\r\n   \r\n};\r\n\r\nexport default observer(MessageComponent);","import React, { useState, useEffect, FunctionComponent} from \"react\";\r\nimport CommunicationFeedProviderService from '../../models/CommunicationFeedProviderService';\r\nimport {observer} from \"mobx-react\";\r\nimport MessageComponent from '../../components/MessageComponent/MessageComponent';\r\nimport './MessagingView.css';\r\nimport { ViewArrayOutlined } from \"@material-ui/icons\";\r\n\r\nconst MessagingView: FunctionComponent<{}> = props => {\r\n  \r\n   const feed = CommunicationFeedProviderService.getCommunicationFeed();\r\n\r\n   let messagesEndRef = React.createRef<HTMLDivElement>();\r\n\r\n   const scrollToBottom = () => {\r\n     if(messagesEndRef != null && messagesEndRef.current != null)\r\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n\r\n    //Scroll to the bottom to move new messages into the users view\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    });\r\n\r\n    return <div className='MessagingView'>\r\n        {feed.messages.map((item:any)=> \r\n        (<MessageComponent message={item}></MessageComponent> ))}\r\n        <div ref={messagesEndRef} />\r\n    </div>\r\n  };\r\n\r\nexport default observer(MessagingView);","import React, {FunctionComponent} from \"react\";\r\nimport CommunicationFeedProviderService from '../../models/CommunicationFeedProviderService';\r\nimport {observer} from \"mobx-react\";\r\nimport './EmojiSelection.css'\r\n\r\n\r\nconst EmojiSelection: FunctionComponent<{}> = props => {\r\n\r\n  const emojiCollection : string[] = \"ü¶ò üêÜ üêã ü¶î üêâ üëΩ üëæ ü§ñ üéÉ üêØ üêÆ üò∫ üê∑ üßî üë®‚Äçü¶≥ ‚õπÔ∏è‚Äç‚ôÄÔ∏è\".split(' ');\r\n\r\n  const feed = CommunicationFeedProviderService.getCommunicationFeed();\r\n\r\n  const selection = (item:string)=>{\r\n    feed.user = {emoji: item};\r\n    feed.localBotMessage(`Thanks! Nice to meet you ${item}`);\r\n    feed.sendMessage(`@Everyone say hi to ${item}`)\r\n  };\r\n\r\n  return <div className =\"EmojiSelection\">\r\n \r\n    {\r\n      emojiCollection.map((item:string)=> \r\n     (<a onClick={()=>{selection(item)}} className =\"EmojiSelection__item\">{item}</a>)\r\n      )\r\n    }\r\n  </div>\r\n};\r\n\r\nexport default observer(EmojiSelection);","import React, { FunctionComponent,useState  } from 'react';\r\nimport { TextField , Button } from '@material-ui/core';\r\nimport CommunicationFeedProviderService from '../../models/CommunicationFeedProviderService';\r\nimport './MessageEditor.css';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {observer} from \"mobx-react\";\r\nimport EmojiSelection from '../../components/EmojiSelection/EmojiSelection';\r\n\r\nconst MessageEditor: FunctionComponent<{}> = props => {\r\n\r\nlet [message_value,setMessage_value] =useState(\"\");\r\n\r\n  const feed = CommunicationFeedProviderService.getCommunicationFeed();\r\n\r\n  const sendMessage = ()=>{\r\n\r\n    if(message_value.trim() != \"\")\r\n    {\r\n      feed.sendMessage(message_value);\r\n      setMessage_value(\"\");\r\n    }\r\n    else\r\n    { \r\n      //todo: alert for messages which are not valid\r\n    }\r\n\r\n  };\r\n\r\n    return <div className='MessageEditor'>\r\n\r\n      {feed.user == null ? <EmojiSelection></EmojiSelection> :\r\n      <div className ='MessageEditor__inner'>\r\n     <TextField\r\n          label=\"Your Message\"\r\n          multiline\r\n          rows={4}\r\n          value={message_value} \r\n          id =\"message_field\"\r\n          placeholder=\"Type here..\"\r\n          fullWidth={true}\r\n          onChange={(event)=>{setMessage_value(event.target.value);}}\r\n          variant=\"outlined\"\r\n        />\r\n        <Button color=\"primary\" onClick={sendMessage}> <SendIcon></SendIcon></Button>\r\n        </div>\r\n   } </div>\r\n};\r\n\r\nexport default observer(MessageEditor);","import React from 'react';\r\nimport './App.css';\r\nimport AppLayoutView from './views/AppLayoutView/AppLayoutView';\r\nimport MessagingView from './views/MessagingView/MessagingView';\r\nimport MessageEditor from './components/MessageEditor/MessageEditor';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n   <AppLayoutView>\r\n     <MessagingView></MessagingView>\r\n     <MessageEditor></MessageEditor>\r\n   </AppLayoutView>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport CommunicationFeedProviderService from './models/CommunicationFeedProviderService';\r\nimport Pusher from 'pusher-js';\r\n\r\nasync function subscribeToPusher()\r\n{\r\n  Pusher.logToConsole = true;\r\n\r\n  const pusher = await new Pusher('11b4ad3a39f15ba40603',  {\r\n    cluster: 'eu',\r\n     authEndpoint: 'https://pacific-garden-77198.herokuapp.com/pusher/auth' \r\n  });\r\n\r\n  const channel = await pusher.subscribe('private-channel');\r\n  const feed = CommunicationFeedProviderService.getCommunicationFeed();\r\n\r\n  await channel.bind('pusher:subscription_succeeded', function() {\r\n    feed.channels.push(channel);\r\n    feed.join(0);\r\n    feed.printDialogue([\r\n      \"Oh!\",\r\n      \"You're earlier than I expected üôà\",\r\n      \"‚ú®üéâ WELCOME ü•≥üéà\",\r\n      \"üëâ Just select and an emoji and start chatting\"\r\n    ],120);\r\n  });\r\n\r\n  await channel.bind('client-message', (data:any)=>{ feed.receiveMessage(data); });\r\n}\r\n\r\nsubscribeToPusher();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}